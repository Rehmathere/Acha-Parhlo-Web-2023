-------------------------------------------------------------------------------

import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Z_Test from './Z_Test';
import Z_Test_2 from './Z_Test_2';
import Z_Test_C from './Z_Test_C';

export default function Z_Test_Parent() {
    // Main Body
    return (
        <Router>
            <Routes>
                {/* 1 Home Page */}
                <Route path='/' element={<Z_Test />} />
                {/* 2 Update Page */}
                <Route path='/Z_Test_2/:id' element={<Z_Test_2 />} />
                {/* 3 Create Page */}
                <Route path='/Z_Test_C' element={<Z_Test_C />} />
            </Routes>
        </Router>
    );
}

-------------------------------------------------------------------------------

import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import "../Portal/MyFeatures/PChat/FinalChat.css";
// Firebase
import { doc, getDocs, deleteDoc, collection } from 'firebase/firestore';
import { database1 } from '../Portal/firebase';

export default function Z_Test() {
  // Navigate
  const navigate = useNavigate();
  // --------- Backend Part Logic ---------  
  const [val, setVal] = useState([]);
  const value = collection(database1, "4 - Student Records");
  const getData = async () => {
    try {
      const dbVal = await getDocs(value);
      setVal(dbVal.docs.map(doc => ({ ...doc.data(), id: doc.id })));
    } catch (error) {
      console.error("Error fetching data from Firestore:", error);
    }
  }
  const deleteData = async (id) => {
    try {
      const docRef = doc(database1, "4 - Student Records", id);
      await deleteDoc(docRef);
      // Refresh data after deletion
      getData();
    } catch (error) {
      console.error("Error deleting data from Firestore:", error);
    }
  }
  useEffect(() => {
    getData();
  }, []);
  const handleEdit = (id, values) => {
    navigate(`/Z_Test_2/${id}`, { state: { values } });
  }
  const handleDelete = (id) => {
    deleteData(id);
  }
  // --------- Backend Part Logic ---------  

  // Main Body
  return (
    <>
      <div id="Z_Create">
        <div id="Z_Create_Part_1">
          <h4>Student Records App Feature</h4>
        </div>
      </div>
      <div className='container'>
        {val.map(values => (
          <div id='Z_T_1_Box' key={values.id}>
            <h4>1 - {values.U1_universityName}</h4>
            <h4>2 - {values.U2_campus}</h4>
            <button onClick={() => handleEdit(values.id)}>Student Detail</button>
            {/* Delete */}
            <button onClick={() => handleDelete(values.id)}>Delete</button>
          </div>
        ))}
      </div>
    </>
  );
}

-------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import "../Portal/MyFeatures/PChat/FinalChat.css";
// Firebase
import { doc, getDoc, updateDoc } from 'firebase/firestore';
import { database1 } from '../Portal/firebase';
// Navigate
import { useNavigate, useParams } from "react-router-dom"

export default function Z_Test_2() {
    // Navigate
    const navigate = useNavigate();
    // ------------- Backend Part Logic -------------
    const { id } = useParams();
    const [U1_universityName, setU1_universityName] = useState("");
    const [U2_campus, setU2_campus] = useState("");
    const [U3_intake, setU3_intake] = useState("");
    const [U4_courseName, setU4_courseName] = useState("");
    // Function
    useEffect(() => {
        const fetchData = async () => {
            const docRef = doc(database1, "4 - Student Records", id);
            const docSnap = await getDoc(docRef);
            if (docSnap.exists()) {
                const data = docSnap.data();
                setU1_universityName(data.U1_universityName || "");
                setU2_campus(data.U2_campus || "");
                setU3_intake(data.U3_intake || "");
                setU4_courseName(data.U4_courseName || "");
            }
        };
        fetchData();
    }, [id]);
    // ------------- Backend Part Logic -------------
    // Main Body
    return (
        <>
            <div className='container'>
                <div id="Z_T_C_Box">
                    {/* Heading */}
                    <h1>Student Records</h1>
                    {/* Detail */}
                    <div id="Row">
                        <p>1 - University Name</p>
                        <p>{U1_universityName}</p>
                    </div>
                    <div id="Row">
                        <p>2 - Campus</p>
                        <p>{U2_campus}</p>
                    </div>
                    <div id="Row">
                        <p>3 - Intake</p>
                        <p>{U3_intake}</p>
                    </div>
                    <div id="Row">
                        <p>4 - Course Name</p>
                        <p>{U4_courseName}</p>
                    </div>
                    {/* Back Button */}
                    <button id='Btn_C_1' onClick={() => navigate('/')}>Move Back</button>
                </div>
            </div>
        </>
    );
}

-------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { getDocs, collection } from 'firebase/firestore';
import { database1, storage } from '../Portal/firebase';
import { getDownloadURL, ref } from 'firebase/storage';

export default function Z_Test_C() {
  const [imageBase64List, setImageBase64List] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const collectionRef = collection(database1, '4 - Student Records');
        const querySnapshot = await getDocs(collectionRef);

        if (!querySnapshot.empty) {
          const data = querySnapshot.docs[0].data();
          const imagePaths = [
            data.D3_1_Image_Transcript,
            data.D3_2_Image_Degree,
            // ... (other image paths)
          ];

          const imageBase64Array = await Promise.all(
            imagePaths.map(async (imagePath) => {
              const storageRef = ref(storage, imagePath);
              const imageUrl = await getDownloadURL(storageRef);

              // Log the imageUrl to check if it's valid
              console.log('imageUrl:', imageUrl);

              const response = await fetch(imageUrl);
              const blob = await response.blob();

              return new Promise((resolve) => {
                const reader = new FileReader();
                reader.onloadend = () => {
                  const base64data = reader.result;
                  resolve(base64data);
                };
                reader.readAsDataURL(blob);
              });
            })
          );

          setImageBase64List(imageBase64Array);
        } else {
          console.error('No documents found in the collection.');
          // Handle the case where there are no documents in the collection
        }
      } catch (error) {
        console.error('Error fetching data from Firestore:', error);
        // Handle the error appropriately, e.g., show an error message to the user
      }
    };

    fetchData();
  }, []);

  return (
    <div className='container'>
      <div id='Z_T_C_Box'>
        {/* Display Images */}
        {imageBase64List.length > 0 && (
          <>
            <h6>Images from Firestore, Firebase</h6>
            {imageBase64List.map((base64, index) => (
              <div key={index}>
                <img src={base64} alt={`Firestore Image ${index + 1}`} />
              </div>
            ))}
          </>
        )}
      </div>
    </div>
  );
}

-------------------------------------------------------------------------------